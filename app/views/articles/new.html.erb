<h2>新規投稿</h2>
  <div class="flex-item">
	  <ul class="nav nav-tabs" role="tablist">
	    <li class="active" role="presentation">
	      <a aria-controls="tab_a" data-toggle="tab" href="#tab_a" role="tab" class="mr-5">相談</a>
	    </li>
		  <li role="presentation">
		    <a aria-controls="tab_b" data-toggle="tab" href="#tab_b" role="tab">シェア</a>
		  </li>
		</ul>
	</div>

  <!--タブ「相談・質問」のとき-->
		<div class="tab-content">
			<div class="tab-pane" id="tab_a" role="tabpanel">
      <%= form_with model: @article,local: true do |f| %>
  <!--相談ステータスをfalse(相談中)にする-->
        <%= f.hidden_field :is_closed, value: false %>
      	<div class="flex">
      		<div  class="flex-item">
      			<div class="image_field">
      			  <span class="btn btn-file btn-info"><%= f.attachment_field :article_images_images, multiple: true %></span>
      				<p>選択するとプレビューされます。</p>
              <img id="prev_img_0" style="width:25%;">
              <img id="prev_img_1" style="width:25%;">
              <img id="prev_img_2" style="width:25%;">
              <img id="prev_img_3" style="width:25%;">
            </div>
      		</div>
      	</div>
		  	<div class="form-group">
		  		<%= f.label :title, "相談タイトル" %>
					<%= f.text_field :title, class:"form-control" %>
		  	</div>
  			<div class="form-group">
  			  <%= f.label :body, "今、悩んでいること" %>
  				<%= f.text_area :body, rows: 5, class:"form-control" %>
  			</div>
  			<%= f.label :category_id, "カテゴリー" %>
        <span class="select_field"><%= f.collection_select :category_id, Category.all, :id, :name %></span>
        <div class="flex align-center pl5">
        	<%= f.submit "投稿する", class: "btn btn-primary" %>
        </div>
      <% end %>
	    </div>

<!--タブ「シェア」のとき-->
  		<div class="tab-pane active" id="tab_b" role="tabpanel">
      <%= form_with model: @article,local: true do |f| %>
      	<div class="flex">
      		<div  class="flex-item">
      			<div class="image_field">
      			  <span class="btn btn-file btn-info"><%= f.attachment_field :article_images_images, multiple: true %></span>
      				<p>選択するとプレビューされます。</p>
              <img id="prev_img_0" style="width:25%;">
              <img id="prev_img_1" style="width:25%;">
              <img id="prev_img_2" style="width:25%;">
              <img id="prev_img_3" style="width:25%;">
            </div>
      		</div>
      	</div>
      	<div class="form-group">
       		<%= f.label :title, "タイトル" %>
  				<%= f.text_field :title, class:"form-control" %>
  		  </div>
  			<div class="form-group">
  				<%= f.label :body, "キャプション" %>
  				<%= f.text_area :body, rows: 5, class:"form-control" %>
  			</div>
  			<%= f.label :category_id, "カテゴリー" %>
      	<span class="select_field"><%= f.collection_select :category_id, Category.all, :id, :name %></span>
      	<div class="flex align-center pl5">
      		<%= f.submit "投稿する", class: "btn btn-primary" %>
      	</div>
      <% end %>
      </div>
  	</div>




<script>
  $('#article_article_images_images').on('change', function (e) { //ユーザがフォーム(input要素)に変更を加えた時にイベント発火。eには、article_imageのデータが入っている状態
    if(e.target.files.length > 4){
        alert('一度に投稿できる画像は4枚までです。');
        $('#article_article_images_images').val = "";　           // 4枚以上画像を選択された場合、ファイルをリセット。
        for( let i = 0; i < 4; i++) {
          $(`#prev_img_${i}`).attr('src', "");　                  // ファイルリセットに伴いプレビュー初期化
        }

    } else {
      let reader = new Array(4);                          　      //  4つまでデータ格納できる配列を生成。
        for( let i = 0; i < 4; i++) {
          $(`#prev_img_${i}`).attr('src', "");                  　//  画像選択を上書きした時に、1回目より数が少なかったりすると画面上にプレビューが残るので初期化
        }

        for( let i = 0; i < e.target.files.length; i++) {          //  選択された画像の数だけ繰返し処理
          reader[i] = new FileReader();                            //  FileReaderオブジェクトを生成し、配列に追加。FileReaderは、BlobやFileが保有するバッファを非同期で読み取ることが出来る
          reader[i].onload = finisher(i,e);                        //  画像の読込が完了後、下記のfinisherイベント発火
          reader[i].readAsDataURL(e.target.files[i]);              //  readAsDataURLメソッドで、指定されたBlob又はFileのファイルの読込みとそのURL生成を行う。

          function finisher(i,e){                                  //  onloadは別関数で準備しないと繰返し処理内では使用できないので、関数を準備。
            return function(e){
            $(`#prev_img_${i}`).attr('src', e.target.result);      //  img要素のsrc属性の中身を置換する。e.target=イベントを発生させたオブジェクト。result属性=FileReaderの読取ったファイルが文字列として格納される。
          }
        }
      }
     }
  });
</script>